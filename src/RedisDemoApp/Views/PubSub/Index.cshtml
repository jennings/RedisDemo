@{
    ViewBag.Title = "Pub/Sub";
}

<div class="row">
    <div class="col-md-6">
        <h2>Redis Chat</h2>
        <p>This is a simple demo of Redis pub/sub.</p>
        <p>Type a message and click "Publish", see that nothing is delivered.</p>
        <p>Then, click "Subscribe", and publish a new message. Now it is delivered!</p>
        <p>
            (We're cheating a little, because SignalR is broadcasting to the browsers for us.
            But, if you had multiple web apps all subscribed to the same channel, Redis
            would deliver to all of them.)
        </p>
        <ul id="messages"></ul>
    </div>
    <div class="col-md-6">
        <h2>Actions</h2>
        @using (Ajax.BeginForm("Subscribe", new AjaxOptions()))
        {
            <button type="submit">Subscribe</button>
        }
        <hr />
        @using (Ajax.BeginForm("Unsubscribe", new AjaxOptions()))
        {
            <button type="submit">Unsubscribe</button>
        }
        <hr />
        @using (Ajax.BeginForm("Publish", new AjaxOptions { OnComplete = "resetMessageBox" }))
        {
            <input type="text" id="message" name="message" placeholder="Message" autofocus />
            <button type="submit">Publish</button>
        }
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>

        var myHub = $.connection.myHub;
        myHub.client.receive = function (msg) {
            addMessage(msg);
        }

        $.connection.hub.start().done(function () {
            addMessage('Connected');
        });

        function addMessage(msg) {
            var $li = $('<li>');
            $li.text(msg);
            $('#messages').prepend($li);
        }

        function resetMessageBox() {
            $('#message').val('').focus();
        }
    </script>
}